public class Text{
	/*
	插入排序
	 
    从第一个元素开始，该元素可以认为已经被排序
    取出下一个元素，在已经排序的元素序列中从后向前扫描
    如果该元素（已排序）大于新元素，将该元素移到下一位置
    重复步骤3，直到找到已排序的元素小于或者等于新元素的位置
    将新元素插入到该位置后
    重复以上步骤
    
    平均时间复杂度 	最好情况 	最坏情况 	空间复杂度
     O(n²)            O(n²) 	 O(n²) 	      O(1)

	 */
	//通过交换进行插入排序，借鉴冒泡排序
	public static void insertSort1(int[] a) {
	    for (int i = 0; i < a.length - 1; i++) {
	        for (int j = i + 1; j > 0; j--) {
	            if (a[j] < a[j - 1]) {
	                int temp = a[j];
	                a[j] = a[j - 1];
	                a[j - 1] = temp;
	            }
	        }
	    }
	}
	
	//
	 /* 通过将较大的元素都向右移动而不总是交换两个元素*/
	public static void main(String[] args) {
		int[] array = new int[] {7, 9, 6, 3, 2, 8};
		System.out.println("初始数组为：");
		for(int i = 0; i < array.length; i++) {
			System.out.print(array[i]+" ");
		}
		System.out.print( "\n");
			
		insertSort1(array);	   
		for(int i = 0; i < array.length; i++) {
			System.out.print(array[i]+" ");
		}
		System.out.print( "\n");
	}
}

